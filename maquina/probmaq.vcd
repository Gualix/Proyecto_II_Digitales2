$date
	Mon Jul 12 23:13:31 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module banco $end
$var wire 4 ! sig_estado [3:0] $end
$var wire 1 " reset $end
$var wire 1 # next_idle $end
$var wire 8 $ next_bajo [7:0] $end
$var wire 8 % next_alto [7:0] $end
$var wire 1 & next_active $end
$var wire 1 ' init $end
$var wire 1 ( idle_out $end
$var wire 4 ) estado_actual [3:0] $end
$var wire 8 * empty_fifos [7:0] $end
$var wire 1 + clk $end
$var wire 8 , bajo_out [7:0] $end
$var wire 8 - bajo [7:0] $end
$var wire 8 . alto_out [7:0] $end
$var wire 8 / alto [7:0] $end
$var wire 1 0 active_out $end
$scope module maq $end
$var wire 1 " reset $end
$var wire 1 ' init $end
$var wire 8 1 empty_fifos [7:0] $end
$var wire 1 + clk $end
$var wire 8 2 bajo [7:0] $end
$var wire 8 3 alto [7:0] $end
$var reg 8 4 FIFO_empties [7:0] $end
$var reg 1 0 active_out $end
$var reg 8 5 alto_out [7:0] $end
$var reg 8 6 bajo_out [7:0] $end
$var reg 4 7 estado_actual [3:0] $end
$var reg 1 ( idle_out $end
$var reg 1 & next_active $end
$var reg 8 8 next_alto [7:0] $end
$var reg 8 9 next_bajo [7:0] $end
$var reg 1 # next_idle $end
$var reg 4 : sig_estado [3:0] $end
$upscope $end
$scope module maqprob $end
$var wire 1 0 active_out $end
$var wire 8 ; alto_out [7:0] $end
$var wire 8 < bajo_out [7:0] $end
$var wire 4 = estado_actual [3:0] $end
$var wire 1 ( idle_out $end
$var wire 1 & next_active $end
$var wire 8 > next_alto [7:0] $end
$var wire 8 ? next_bajo [7:0] $end
$var wire 1 # next_idle $end
$var wire 4 @ sig_estado [3:0] $end
$var reg 8 A alto [7:0] $end
$var reg 8 B bajo [7:0] $end
$var reg 1 + clk $end
$var reg 8 C empty_fifos [7:0] $end
$var reg 1 ' init $end
$var reg 1 " reset $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b11111111 C
b0 B
b0 A
b0 @
bx ?
bx >
bx =
bx <
bx ;
b0 :
bx 9
bx 8
bx 7
bx 6
bx 5
b11111111 4
b0 3
b0 2
b11111111 1
x0
b0 /
bx .
b0 -
bx ,
0+
b11111111 *
bx )
x(
0'
x&
bx %
bx $
x#
1"
b0 !
$end
#1
b1 !
b1 :
b1 @
b0 .
b0 5
b0 ;
b0 ,
b0 6
b0 <
0(
00
b0 )
b0 7
b0 =
1'
0"
1+
#2
0+
#3
b10 !
b10 :
b10 @
0'
b1 )
b1 7
b1 =
1+
#4
0+
#5
b10011000 ,
b10011000 6
b10011000 <
b11110000 .
b11110000 5
b11110000 ;
1(
b10 )
b10 7
b10 =
b11110000 /
b11110000 3
b11110000 A
b10011000 -
b10011000 2
b10011000 B
1+
#6
0+
#7
b110 ,
b110 6
b110 <
b11111010 .
b11111010 5
b11111010 ;
b11111010 /
b11111010 3
b11111010 A
b110 -
b110 2
b110 B
1+
#8
0+
#9
1+
#10
0+
#11
1+
#12
0+
#13
1+
#14
0+
#15
b11 !
b11 :
b11 @
b0 4
b0 *
b0 1
b0 C
1+
#16
0+
#17
0(
b11 )
b11 7
b11 =
1+
#18
0+
#19
b1 !
b1 :
b1 @
1'
b11110000 /
b11110000 3
b11110000 A
b10011000 -
b10011000 2
b10011000 B
1+
#20
0+
#21
b10011000 $
b10011000 9
b10011000 ?
b11110000 %
b11110000 8
b11110000 >
b1 )
b1 7
b1 =
1+
#22
0+
#23
1+
#24
0+
#25
1+
#26
0+
#27
1+
#28
0+
#29
1+
#30
0+
#31
1+
