$date
	Wed Jul  7 14:18:56 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module bancoRoundRobin $end
$var wire 1 ! reset $end
$var wire 1 " push_F3 $end
$var wire 1 # push_F2 $end
$var wire 1 $ push_F1 $end
$var wire 1 % push_F0 $end
$var wire 1 & pop_F3 $end
$var wire 1 ' pop_F2 $end
$var wire 1 ( pop_F1 $end
$var wire 1 ) pop_F0 $end
$var wire 10 * out_FIFO_3 [9:0] $end
$var wire 10 + out_FIFO_2 [9:0] $end
$var wire 10 , out_FIFO_1 [9:0] $end
$var wire 10 - out_FIFO_0 [9:0] $end
$var wire 10 . in_FIFO_3 [9:0] $end
$var wire 10 / in_FIFO_2 [9:0] $end
$var wire 10 0 in_FIFO_1 [9:0] $end
$var wire 10 1 in_FIFO_0 [9:0] $end
$var wire 1 2 empty_P3 $end
$var wire 1 3 empty_P2 $end
$var wire 1 4 empty_P1 $end
$var wire 1 5 empty_P0 $end
$var wire 1 6 clk $end
$var wire 1 7 almost_full_P3 $end
$var wire 1 8 almost_full_P2 $end
$var wire 1 9 almost_full_P1 $end
$var wire 1 : almost_full_P0 $end
$scope module controlador $end
$var wire 1 ; empty_P4 $end
$var wire 1 < empty_P5 $end
$var wire 1 = empty_P6 $end
$var wire 1 > empty_P7 $end
$var wire 1 ! reset $end
$var wire 10 ? in_FIFO_3 [9:0] $end
$var wire 10 @ in_FIFO_2 [9:0] $end
$var wire 10 A in_FIFO_1 [9:0] $end
$var wire 10 B in_FIFO_0 [9:0] $end
$var wire 1 2 empty_P3 $end
$var wire 1 3 empty_P2 $end
$var wire 1 4 empty_P1 $end
$var wire 1 5 empty_P0 $end
$var wire 1 6 clk $end
$var wire 1 7 almost_full_P3 $end
$var wire 1 8 almost_full_P2 $end
$var wire 1 9 almost_full_P1 $end
$var wire 1 : almost_full_P0 $end
$var reg 10 C out_FIFO_0 [9:0] $end
$var reg 10 D out_FIFO_1 [9:0] $end
$var reg 10 E out_FIFO_2 [9:0] $end
$var reg 10 F out_FIFO_3 [9:0] $end
$var reg 1 ) pop_F0 $end
$var reg 1 ( pop_F1 $end
$var reg 1 ' pop_F2 $end
$var reg 1 & pop_F3 $end
$var reg 1 % push_F0 $end
$var reg 1 $ push_F1 $end
$var reg 1 # push_F2 $end
$var reg 1 " push_F3 $end
$upscope $end
$scope module test $end
$var wire 10 G out_FIFO_0 [9:0] $end
$var wire 10 H out_FIFO_1 [9:0] $end
$var wire 10 I out_FIFO_2 [9:0] $end
$var wire 10 J out_FIFO_3 [9:0] $end
$var wire 1 ) pop_F0 $end
$var wire 1 ( pop_F1 $end
$var wire 1 ' pop_F2 $end
$var wire 1 & pop_F3 $end
$var wire 1 % push_F0 $end
$var wire 1 $ push_F1 $end
$var wire 1 # push_F2 $end
$var wire 1 " push_F3 $end
$var reg 1 : almost_full_P0 $end
$var reg 1 9 almost_full_P1 $end
$var reg 1 8 almost_full_P2 $end
$var reg 1 7 almost_full_P3 $end
$var reg 1 6 clk $end
$var reg 1 5 empty_P0 $end
$var reg 1 4 empty_P1 $end
$var reg 1 3 empty_P2 $end
$var reg 1 2 empty_P3 $end
$var reg 1 K empty_P4 $end
$var reg 1 L empty_P5 $end
$var reg 1 M empty_P6 $end
$var reg 1 N empty_P7 $end
$var reg 10 O in_FIFO_0 [9:0] $end
$var reg 10 P in_FIFO_1 [9:0] $end
$var reg 10 Q in_FIFO_2 [9:0] $end
$var reg 10 R in_FIFO_3 [9:0] $end
$var reg 1 ! reset $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx R
bx Q
bx P
bx O
xN
xM
xL
xK
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
z>
z=
z<
z;
0:
09
08
07
16
05
04
03
02
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
0)
0(
0'
0&
0%
0$
0#
0"
0!
$end
#1
06
#2
15
1"
1#
1$
1%
1)
16
#3
06
#4
1(
0)
14
16
#5
06
#6
13
1'
0(
16
#7
06
#8
1&
0'
12
16
#9
06
#10
02
03
04
05
16
#11
06
#12
0&
1)
16
#13
06
#14
0N
0M
0L
0K
16
#15
06
#16
16
#17
06
#18
1:
16
#19
06
#20
0"
0#
0$
0%
19
0:
16
#21
06
#22
16
#23
06
#24
16
#25
06
#26
16
#27
06
#28
16
#29
06
#30
16
#31
06
#32
16
#33
06
#34
16
#35
06
#36
16
#37
06
#38
16
