$date
	Tue Jul  6 20:51:22 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module Fifo $end
$var wire 1 ! clk $end
$var wire 10 " data_in [9:0] $end
$var wire 1 # error $end
$var wire 1 $ pop $end
$var wire 1 % push $end
$var wire 1 & reset $end
$var wire 10 ' FIFO_data_out [9:0] $end
$var reg 1 ( almost_empty_fifo $end
$var reg 1 ) almost_full_fifo $end
$var reg 9 * cnt [8:0] $end
$var reg 1 + empty_fifo $end
$var reg 1 , full_fifo $end
$var reg 1 - rd_enable $end
$var reg 1 . wr_enable $end
$scope module mem $end
$var wire 10 / FIFO_data_in [9:0] $end
$var wire 1 ! clk $end
$var wire 1 - rd_enable $end
$var wire 1 & reset $end
$var wire 1 . wr_enable $end
$var reg 10 0 FIFO_data_out [9:0] $end
$var reg 3 1 rd_ptr [2:0] $end
$var reg 3 2 wr_ptr [2:0] $end
$var integer 32 3 i [31:0] $end
$upscope $end
$upscope $end
$scope module bancoRoundRobin $end
$var wire 1 4 reset $end
$var wire 1 5 push_F3 $end
$var wire 1 6 push_F2 $end
$var wire 1 7 push_F1 $end
$var wire 1 8 push_F0 $end
$var wire 1 9 pop_F3 $end
$var wire 1 : pop_F2 $end
$var wire 1 ; pop_F1 $end
$var wire 1 < pop_F0 $end
$var wire 10 = out_FIFO_3 [9:0] $end
$var wire 10 > out_FIFO_2 [9:0] $end
$var wire 10 ? out_FIFO_1 [9:0] $end
$var wire 10 @ out_FIFO_0 [9:0] $end
$var wire 10 A in_FIFO_3 [9:0] $end
$var wire 10 B in_FIFO_2 [9:0] $end
$var wire 10 C in_FIFO_1 [9:0] $end
$var wire 10 D in_FIFO_0 [9:0] $end
$var wire 1 E empty_P3 $end
$var wire 1 F empty_P2 $end
$var wire 1 G empty_P1 $end
$var wire 1 H empty_P0 $end
$var wire 1 I clk $end
$var wire 1 J almost_full_P3 $end
$var wire 1 K almost_full_P2 $end
$var wire 1 L almost_full_P1 $end
$var wire 1 M almost_full_P0 $end
$scope module controlador $end
$var wire 1 N empty_P4 $end
$var wire 1 O empty_P5 $end
$var wire 1 P empty_P6 $end
$var wire 1 Q empty_P7 $end
$var wire 1 4 reset $end
$var wire 10 R out3_FIFO [9:0] $end
$var wire 10 S out2_FIFO [9:0] $end
$var wire 10 T out1_FIFO [9:0] $end
$var wire 10 U out0_FIFO [9:0] $end
$var wire 10 V in_FIFO_3 [9:0] $end
$var wire 10 W in_FIFO_2 [9:0] $end
$var wire 10 X in_FIFO_1 [9:0] $end
$var wire 10 Y in_FIFO_0 [9:0] $end
$var wire 1 E empty_P3 $end
$var wire 1 F empty_P2 $end
$var wire 1 G empty_P1 $end
$var wire 1 H empty_P0 $end
$var wire 10 Z data [9:0] $end
$var wire 1 I clk $end
$var wire 1 J almost_full_P3 $end
$var wire 1 K almost_full_P2 $end
$var wire 1 L almost_full_P1 $end
$var wire 1 M almost_full_P0 $end
$var reg 10 [ out_FIFO_0 [9:0] $end
$var reg 10 \ out_FIFO_1 [9:0] $end
$var reg 10 ] out_FIFO_2 [9:0] $end
$var reg 10 ^ out_FIFO_3 [9:0] $end
$var reg 1 < pop_F0 $end
$var reg 1 ; pop_F1 $end
$var reg 1 : pop_F2 $end
$var reg 1 9 pop_F3 $end
$var reg 1 8 push_F0 $end
$var reg 1 7 push_F1 $end
$var reg 1 6 push_F2 $end
$var reg 1 5 push_F3 $end
$var reg 2 _ select [1:0] $end
$scope module demultiplexor $end
$var wire 2 ` select [1:0] $end
$var wire 1 4 reset $end
$var wire 10 a in_conductual [9:0] $end
$var wire 1 I clk $end
$var reg 10 b out_0 [9:0] $end
$var reg 10 c out_1 [9:0] $end
$var reg 10 d out_2 [9:0] $end
$var reg 10 e out_3 [9:0] $end
$upscope $end
$scope module multiplexor $end
$var wire 2 f select [1:0] $end
$var wire 1 4 reset $end
$var wire 10 g in_3 [9:0] $end
$var wire 10 h in_2 [9:0] $end
$var wire 10 i in_1 [9:0] $end
$var wire 10 j in_0 [9:0] $end
$var wire 1 I clk $end
$var reg 10 k out_conductual [9:0] $end
$upscope $end
$upscope $end
$scope module test $end
$var wire 10 l out_FIFO_0 [9:0] $end
$var wire 10 m out_FIFO_1 [9:0] $end
$var wire 10 n out_FIFO_2 [9:0] $end
$var wire 10 o out_FIFO_3 [9:0] $end
$var wire 1 < pop_F0 $end
$var wire 1 ; pop_F1 $end
$var wire 1 : pop_F2 $end
$var wire 1 9 pop_F3 $end
$var wire 1 8 push_F0 $end
$var wire 1 7 push_F1 $end
$var wire 1 6 push_F2 $end
$var wire 1 5 push_F3 $end
$var reg 1 M almost_full_P0 $end
$var reg 1 L almost_full_P1 $end
$var reg 1 K almost_full_P2 $end
$var reg 1 J almost_full_P3 $end
$var reg 1 I clk $end
$var reg 1 H empty_P0 $end
$var reg 1 G empty_P1 $end
$var reg 1 F empty_P2 $end
$var reg 1 E empty_P3 $end
$var reg 1 p empty_P4 $end
$var reg 1 q empty_P5 $end
$var reg 1 r empty_P6 $end
$var reg 1 s empty_P7 $end
$var reg 10 t in_FIFO_0 [9:0] $end
$var reg 10 u in_FIFO_1 [9:0] $end
$var reg 10 v in_FIFO_2 [9:0] $end
$var reg 10 w in_FIFO_3 [9:0] $end
$var reg 1 4 reset $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b110 w
b11000 v
b1100000 u
b110000000 t
1s
1r
1q
1p
bx o
bx n
bx m
bx l
bx k
b110000000 j
b1100000 i
b11000 h
b110 g
b0 f
bx e
bx d
bx c
bx b
bx a
b0 `
b0 _
bx ^
bx ]
bx \
bx [
bx Z
b110000000 Y
b1100000 X
b11000 W
b110 V
bx U
bx T
bx S
bx R
zQ
zP
zO
zN
xM
xL
xK
xJ
1I
0H
0G
0F
0E
b110000000 D
b1100000 C
b11000 B
b110 A
bx @
bx ?
bx >
bx =
x<
x;
x:
x9
x8
x7
x6
x5
14
bx 3
bx 2
bx 1
bx 0
bz /
x.
x-
x,
x+
bx *
x)
x(
bx '
z&
z%
z$
z#
bz "
z!
$end
#1
0I
#2
0s
0r
0q
0p
b1100000110 A
b1100000110 V
b1100000110 g
b1100000110 w
b1101111 C
b1101111 X
b1101111 i
b1101111 u
b1110001100 D
b1110001100 Y
b1110001100 j
b1110001100 t
b110000000 Z
b110000000 a
b110000000 k
1I
#3
0I
#4
b1110001100 Z
b1110001100 a
b1110001100 k
b110000000 U
b110000000 b
1I
#5
0I
#6
b110000000 @
b110000000 [
b110000000 l
b1110001100 U
b1110001100 b
1I
#7
0I
#8
b1110001100 @
b1110001100 [
b1110001100 l
1I
#9
0I
#10
1I
#11
0I
#12
1I
#13
0I
#14
1I
#15
0I
#16
1I
#17
0I
#18
1I
#19
0I
#20
1I
#21
0I
#22
1I
#23
0I
#24
1I
#25
0I
#26
1I
